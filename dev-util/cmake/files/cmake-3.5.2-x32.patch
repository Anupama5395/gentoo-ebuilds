--- ./Source/cmFindPackageCommand.cxx
+++ ./Source/cmFindPackageCommand.cxx
@@ -2105,6 +2105,8 @@ bool cmFindPackageCommand::SearchPrefix(
 
   // Construct list of common install locations (lib and share).
   std::vector<std::string> common;
+  common.push_back("lib32");
+  common.push_back("libx32");
   if(!this->LibraryArchitecture.empty())
     {
     common.push_back("lib/"+this->LibraryArchitecture);
--- ./Source/cmExportInstallFileGenerator.cxx
+++ ./Source/cmExportInstallFileGenerator.cxx
@@ -95,8 +95,12 @@ bool cmExportInstallFileGenerator::Gener
        << "get_filename_component(_IMPORT_PREFIX"
        << " \"${CMAKE_CURRENT_LIST_FILE}\" PATH)\n";
     if(cmHasLiteralPrefix(absDestS.c_str(), "/lib/") ||
+       cmHasLiteralPrefix(absDestS.c_str(), "/lib32/") ||
+       cmHasLiteralPrefix(absDestS.c_str(), "/libx32/") ||
        cmHasLiteralPrefix(absDestS.c_str(), "/lib64/") ||
        cmHasLiteralPrefix(absDestS.c_str(), "/usr/lib/") ||
+       cmHasLiteralPrefix(absDestS.c_str(), "/usr/lib32/") ||
+       cmHasLiteralPrefix(absDestS.c_str(), "/usr/libx32/") ||
        cmHasLiteralPrefix(absDestS.c_str(), "/usr/lib64/"))
       {
       // Handle "/usr move" symlinks created by some Linux distros.
--- ./Utilities/cmcurl/CMake/FindGSS.cmake
+++ ./Utilities/cmcurl/CMake/FindGSS.cmake
@@ -205,7 +205,7 @@ message(STATUS "LDFLAGS: ${_GSS_LIB_FLAG
                     endif()
                 endif()
             else()
-                list(APPEND _GSS_LIBDIR_SUFFIXES "lib;lib64") # those suffixes are not checked for HINTS
+                list(APPEND _GSS_LIBDIR_SUFFIXES "lib;lib32;libx32;lib64") # those suffixes are not checked for HINTS
                 if(GSS_FLAVOUR STREQUAL "MIT")
                     set(_GSS_LIBNAME "gssapi_krb5")
                 else()
--- ./Modules/GetPrerequisites.cmake
+++ ./Modules/GetPrerequisites.cmake
@@ -520,7 +520,7 @@ function(gp_resolved_file_type original_
     string(TOLOWER "${resolved_file}" lower)
 
     if(UNIX)
-      if(resolved_file MATCHES "^(/lib/|/lib32/|/lib64/|/usr/lib/|/usr/lib32/|/usr/lib64/|/usr/X11R6/|/usr/bin/)")
+      if(resolved_file MATCHES "^(/lib/|/lib32/|/libx32/|/lib64/|/usr/lib/|/usr/lib32/|/usr/libx32/|/usr/lib64/|/usr/X11R6/|/usr/bin/)")
         set(is_system 1)
       endif()
     endif()
--- ./Modules/GNUInstallDirs.cmake
+++ ./Modules/GNUInstallDirs.cmake
@@ -43,7 +43,7 @@
 # ``LOCALSTATEDIR``
 #   modifiable single-machine data (``var``)
 # ``LIBDIR``
-#   object code libraries (``lib`` or ``lib64``
+#   object code libraries (``lib``, ``lib32``, ``libx32``, ``lib64``
 #   or ``lib/<multiarch-tuple>`` on Debian)
 # ``INCLUDEDIR``
 #   C header files (``include``)
@@ -209,6 +209,16 @@ if(NOT DEFINED CMAKE_INSTALL_LIBDIR OR (
           if(DEFINED _GNUInstallDirs_LAST_CMAKE_INSTALL_PREFIX)
             set(__LAST_LIBDIR_DEFAULT "lib64")
           endif()
+        elseif(EXISTS /usr/lib32)
+          set(_LIBDIR_DEFAULT "lib32")
+          if(DEFINED _GNUInstallDirs_LAST_CMAKE_INSTALL_PREFIX)
+            set(__LAST_LIBDIR_DEFAULT "lib32")
+          endif()
+        elseif(EXISTS /usr/libx32)
+          set(_LIBDIR_DEFAULT "libx32")
+          if(DEFINED _GNUInstallDirs_LAST_CMAKE_INSTALL_PREFIX)
+            set(__LAST_LIBDIR_DEFAULT "libx32")
+          endif()
         endif()
       endif()
     endif()
--- ./Modules/FindArmadillo.cmake
+++ ./Modules/FindArmadillo.cmake
@@ -45,7 +45,7 @@
 # UNIX paths are standard, no need to write.
 find_library(ARMADILLO_LIBRARY
   NAMES armadillo
-  PATHS "$ENV{ProgramFiles}/Armadillo/lib"  "$ENV{ProgramFiles}/Armadillo/lib64" "$ENV{ProgramFiles}/Armadillo"
+  PATHS "$ENV{ProgramFiles}/Armadillo/lib"  "$ENV{ProgramFiles}/Armadillo/lib32" "$ENV{ProgramFiles}/Armadillo/libx32" "$ENV{ProgramFiles}/Armadillo/lib64" "$ENV{ProgramFiles}/Armadillo"
   )
 find_path(ARMADILLO_INCLUDE_DIR
   NAMES armadillo
--- ./Modules/CPackRPM.cmake
+++ ./Modules/CPackRPM.cmake
@@ -437,7 +437,7 @@
 #  list of path to be excluded.
 #
 #  * Mandatory : NO
-#  * Default   : /etc /etc/init.d /usr /usr/share /usr/share/doc /usr/bin /usr/lib /usr/lib64 /usr/include
+#  * Default   : /etc /etc/init.d /usr /usr/share /usr/share/doc /usr/bin /usr/lib /usr/lib32 /usr/libx32 /usr/lib64 /usr/include
 #
 #  May be used to exclude path (directories or files) from the auto-generated
 #  list of paths discovered by CPack RPM. The defaut value contains a
@@ -682,7 +682,7 @@ function(cpack_rpm_prepare_content_list)
   endif()
 
   if(NOT DEFINED CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST)
-    set(CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST /etc /etc/init.d /usr /usr/share /usr/share/doc /usr/bin /usr/lib /usr/lib64 /usr/include)
+    set(CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST /etc /etc/init.d /usr /usr/share /usr/share/doc /usr/bin /usr/lib /usr/lib32 /usr/libx32 /usr/lib64 /usr/include)
     if(CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION)
       message("CPackRPM:Debug: Adding ${CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION} to builtin omit list.")
       list(APPEND CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST "${CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION}")
--- ./Modules/FindPkgConfig.cmake
+++ ./Modules/FindPkgConfig.cmake
@@ -255,10 +255,17 @@ macro(_pkg_check_modules_internal _is_re
             list(APPEND _lib_dirs "lib/${CMAKE_LIBRARY_ARCHITECTURE}/pkgconfig")
           endif()
         else()
-          # not debian, chech the FIND_LIBRARY_USE_LIB64_PATHS property
+          # not debian, check the FIND_LIBRARY_USE_LIB64_PATHS property
           get_property(uselib64 GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS)
           if(uselib64)
             list(APPEND _lib_dirs "lib64/pkgconfig")
+          else()
+            # hard-code regardless, since there's no discovery method provided
+            if(EXISTS /usr/lib32)
+              list(APPEND _lib_dirs "lib32/pkgconfig")
+            elseif(EXISTS /usr/libx32)
+              list(APPEND _lib_dirs "libx32/pkgconfig")
+            endif()
           endif()
         endif()
       endif()
--- ./Modules/FindGLEW.cmake
+++ ./Modules/FindGLEW.cmake
@@ -35,7 +35,7 @@
 #  License text for the above reference.)
 
 find_path(GLEW_INCLUDE_DIR GL/glew.h)
-find_library(GLEW_LIBRARY NAMES GLEW glew32 glew glew32s PATH_SUFFIXES lib64)
+find_library(GLEW_LIBRARY NAMES GLEW glew32 glew glew32s PATH_SUFFIXES lib32 libx32 lib64)
 
 set(GLEW_INCLUDE_DIRS ${GLEW_INCLUDE_DIR})
 set(GLEW_LIBRARIES ${GLEW_LIBRARY})
--- ./Modules/FindOpenAL.cmake
+++ ./Modules/FindOpenAL.cmake
@@ -89,7 +89,7 @@ find_library(OPENAL_LIBRARY
   NAMES OpenAL al openal OpenAL32
   HINTS
     ENV OPENALDIR
-  PATH_SUFFIXES lib64 lib libs64 libs ${_OpenAL_ARCH_DIR}
+  PATH_SUFFIXES lib32 libx32 lib64 lib libs64 libs ${_OpenAL_ARCH_DIR}
   PATHS
   ~/Library/Frameworks
   /Library/Frameworks
--- ./Modules/FindIce.cmake
+++ ./Modules/FindIce.cmake
@@ -205,7 +205,7 @@ function(_Ice_FIND)
   endif()
   # Generic 64-bit and 32-bit directories
   list(APPEND ice_binary_suffixes "bin${_x64}" "bin")
-  list(APPEND ice_library_suffixes "${_lib64}" "lib${_x64}" "lib")
+  list(APPEND ice_library_suffixes "lib32" "libx32" "${_lib64}" "lib${_x64}" "lib")
   list(APPEND ice_include_suffixes "include")
   list(APPEND ice_slice_suffixes "slice")
 
--- ./Modules/FindKDE3.cmake
+++ ./Modules/FindKDE3.cmake
@@ -230,7 +230,11 @@ set(QT_AND_KDECORE_LIBS ${QT_LIBRARIES}
 get_filename_component(KDE3_LIB_DIR ${KDE3_KDECORE_LIBRARY} PATH )
 
 if(NOT KDE3_LIBTOOL_DIR)
-   if(KDE3_KDECORE_LIBRARY MATCHES lib64)
+   if(KDE3_KDECORE_LIBRARY MATCHES lib32)
+     set(KDE3_LIBTOOL_DIR /lib32/kde3)
+   elseif(KDE3_KDECORE_LIBRARY MATCHES libx32)
+     set(KDE3_LIBTOOL_DIR /libx32/kde3)
+   elseif(KDE3_KDECORE_LIBRARY MATCHES lib64)
      set(KDE3_LIBTOOL_DIR /lib64/kde3)
    else()
      set(KDE3_LIBTOOL_DIR /lib/kde3)
--- ./Modules/FindDevIL.cmake
+++ ./Modules/FindDevIL.cmake
@@ -56,7 +56,7 @@ find_path(IL_INCLUDE_DIR il.h
 
 find_library(IL_LIBRARIES
   NAMES IL DEVIL
-  PATH_SUFFIXES lib64 lib lib32
+  PATH_SUFFIXES lib lib32 libx32 lib64
   DOC "The file that corresponds to the base il library."
 )
 
@@ -64,7 +64,7 @@ find_library(IL_LIBRARIES
 
 find_library(ILUT_LIBRARIES
   NAMES ILUT
-  PATH_SUFFIXES lib64 lib lib32
+  PATH_SUFFIXES lib lib32 libx32 lib64
   DOC "The file that corresponds to the il (system?) utility library."
 )
 
@@ -72,7 +72,7 @@ find_library(ILUT_LIBRARIES
 
 find_library(ILU_LIBRARIES
   NAMES ILU
-  PATH_SUFFIXES lib64 lib lib32
+  PATH_SUFFIXES lib lib32 libx32 lib64
   DOC "The file that corresponds to the il utility library."
 )
 
--- ./Modules/FindGTK2.cmake
+++ ./Modules/FindGTK2.cmake
@@ -301,8 +301,12 @@ function(_GTK2_FIND_INCLUDE_DIR _var _hd
     find_path(GTK2_${_var}_INCLUDE_DIR ${_hdr}
         PATHS
             ${_gtk2_arch_dir}
+            /usr/local/lib32
+            /usr/local/libx32
             /usr/local/lib64
             /usr/local/lib
+            /usr/lib32
+            /usr/libx32
             /usr/lib64
             /usr/lib
             /usr/X11R6/include
--- ./Modules/CMakeFindPackageMode.cmake
+++ ./Modules/CMakeFindPackageMode.cmake
@@ -85,7 +85,9 @@ if(UNIX)
   # from the outside
   if(NOT CMAKE_SIZEOF_VOID_P)
     set(CMAKE_SIZEOF_VOID_P 4)
-    if(EXISTS /usr/lib64)
+    if(EXISTS /usr/lib32 OR /usr/libx32)
+      set(CMAKE_SIZEOF_VOID_P 4)
+    elseif(EXISTS /usr/lib64)
       set(CMAKE_SIZEOF_VOID_P 8)
     else()
       # use the file utility to check whether itself is 64 bit:
--- ./CMakeLists.txt
+++ ./CMakeLists.txt
@@ -574,7 +574,7 @@ if(NOT CMake_TEST_EXTERNAL_CMAKE)
   if(BUILD_CursesDialog)
     get_filename_component(_CURSES_DIR "${CURSES_LIBRARY}" PATH)
     set(CURSES_NEED_RPATH FALSE)
-    if(NOT "${_CURSES_DIR}" STREQUAL "/lib" AND NOT "${_CURSES_DIR}" STREQUAL "/usr/lib" AND NOT "${_CURSES_DIR}" STREQUAL "/lib64" AND NOT "${_CURSES_DIR}" STREQUAL "/usr/lib64")
+    if(NOT "${_CURSES_DIR}" STREQUAL "/lib" AND NOT "${_CURSES_DIR}" STREQUAL "/usr/lib" AND NOT "${_CURSES_DIR}" STREQUAL "/lib32" AND NOT "${_CURSES_DIR}" STREQUAL "/usr/lib32" AND NOT "${_CURSES_DIR}" STREQUAL "/libx32" AND NOT "${_CURSES_DIR}" STREQUAL "/usr/libx32" AND NOT "${_CURSES_DIR}" STREQUAL "/lib64" AND NOT "${_CURSES_DIR}" STREQUAL "/usr/lib64")
       set(CURSES_NEED_RPATH TRUE)
     endif()
   endif()
@@ -593,7 +593,7 @@ if(NOT CMake_TEST_EXTERNAL_CMAKE)
     endif()
 
     set(QT_NEED_RPATH FALSE)
-    if(NOT "${QT_LIBRARY_DIR}" STREQUAL "/lib" AND NOT "${QT_LIBRARY_DIR}" STREQUAL "/usr/lib" AND NOT "${QT_LIBRARY_DIR}" STREQUAL "/lib64" AND NOT "${QT_LIBRARY_DIR}" STREQUAL "/usr/lib64")
+    if(NOT "${QT_LIBRARY_DIR}" STREQUAL "/lib" AND NOT "${QT_LIBRARY_DIR}" STREQUAL "/usr/lib" AND NOT "${QT_LIBRARY_DIR}" STREQUAL "/lib32" AND NOT "${QT_LIBRARY_DIR}" STREQUAL "/usr/lib32" AND NOT "${QT_LIBRARY_DIR}" STREQUAL "/libx32" AND NOT "${QT_LIBRARY_DIR}" STREQUAL "/usr/libx32" AND NOT "${QT_LIBRARY_DIR}" STREQUAL "/lib64" AND NOT "${QT_LIBRARY_DIR}" STREQUAL "/usr/lib64")
       set(QT_NEED_RPATH TRUE)
     endif()
   endif()

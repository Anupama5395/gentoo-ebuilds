--- adv_cmds-147/md/md.c.dist	2014-12-07 00:48:21.000000000 +0000
+++ adv_cmds-147/md/md.c	2014-12-07 00:55:39.000000000 +0000
@@ -78,6 +78,8 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <unistd.h>
+#include <fcntl.h>
 
 #define LINESIZE 65536  //  NeXT_MOD
 
@@ -88,6 +90,13 @@
 #define OLDSALUTATION "# DO NOT DELETE THIS LINE"
 #define OLDSALUTATIONLEN (sizeof OLDSALUTATION - 1)
 
+static int read_dep(register char *file);
+static void save_dot_o();
+static void parse_dep();
+static void output_dep(FILE *out);
+static void skip_mak(register FILE *makin, register FILE *makout);
+static void expunge_mak(register FILE *makin, register FILE *makout);
+
 char file_array[IObuffer];      /* read file and store crunched names */
 char dep_line[LINESIZE];        /* line being processed */
 char dot_o[LINESIZE];           /* <foo.o>: prefix */
@@ -100,6 +109,7 @@ struct dep {                    /* store
 } dep_files[1000];
 int dep_file_index;
 
+static int
 qsort_strcmp(a, b)
 struct dep *a, *b;
 {
@@ -138,7 +148,8 @@ char *name;
 static void scan_mak(FILE *, FILE *, char *);
 static void finish_mak(FILE *, FILE *);
 
-main(argc,argv)
+void main(argc,argv)
+int argc;
 register char **argv;
 {
 int size;
@@ -269,6 +280,7 @@ usage:
 }
 
 
+static int
 read_dep(file)
 register char *file;
 {
@@ -345,6 +357,7 @@ out: ;
         return 0;
 }
 
+static void
 save_dot_o()
 {
 register char *cp = file_array;
@@ -355,6 +368,7 @@ register int c;
         *svp = 0;
 }
 
+static void
 parse_dep()
 {
 register char *lp = file_array;
@@ -436,6 +450,7 @@ next_filename:
         }
 }
 
+static void
 output_dep(out)
 FILE *out;
 {
@@ -543,6 +558,7 @@ FILE *mak;
         return mak;
 }
 
+static void
 skip_mak(makin, makout)
 register FILE *makin, *makout;
 {
@@ -566,6 +582,7 @@ register int len = SALUTATIONLEN;
                 printf("eof = %d str = \"%s\"", mak_eof, makbuf);
 }
 
+static void
 expunge_mak(makin, makout)
 register FILE *makin, *makout;
 {

--- sh/init.sh.Linux.in.dist	2012-11-21 21:59:46.133254024 +0000
+++ sh/init.sh.Linux.in	2012-11-21 22:03:42.763725042 +0000
@@ -3,6 +3,62 @@
 # Copyright (c) 2007-2009 Roy Marples <roy@marples.name>
 # Released under the 2-clause BSD license.
 
+# This basically mounts $RC_SVCDIR as a ramdisk.
+# The tricky part is finding something our kernel supports
+# tmpfs and ramfs are easy, so force one or the other.
+svcdir_restorecon()
+{
+	local rc=0
+	if [ -x /usr/sbin/selinuxenabled -a -c /selinux/null ] &&
+	  selinuxenabled; then
+		restorecon $RC_SVCDIR
+		rc=$?
+	fi
+	return $rc
+}
+
+mount_svcdir()
+{
+	# mount from fstab if we can
+	fstabinfo --mount "$RC_SVCDIR" && return 0
+
+	local fs= fsopts="-o rw,noexec,nodev,nosuid"
+	local svcsize=${rc_svcsize:-1024}
+
+	# Some buggy kernels report tmpfs even when not present :(
+	if grep -Eq "[[:space:]]+tmpfs$" /proc/filesystems; then
+		local tmpfsopts="${fsopts},mode=755,size=${svcsize}k"
+		mount -n -t tmpfs $tmpfsopts rc-svcdir "$RC_SVCDIR"
+		if [ $? -eq 0 ]; then
+			svcdir_restorecon
+			[ $? -eq 0 ] && return 0
+		fi
+	fi
+
+	if grep -Eq "[[:space:]]+ramfs$" /proc/filesystems; then
+		fs="ramfs"
+		# ramfs has no special options
+	elif [ -e /dev/ram0 ] \
+		&& grep -Eq "[[:space:]]+ext2$" /proc/filesystems; then
+		devdir="/dev/ram0"
+		fs="ext2"
+		dd if=/dev/zero of="$devdir" bs=1k count="$svcsize"
+		mkfs -t "$fs" -i 1024 -vm0 "$devdir" "$svcsize"
+	else
+		echo
+		eerror "OpenRC requires tmpfs, ramfs or a ramdisk + ext2"
+		eerror "compiled into the kernel"
+		echo
+		return 1
+	fi
+
+	mount -n -t "$fs" $fsopts rc-svcdir "$RC_SVCDIR"
+	if [ $? -eq 0 ]; then
+		svcdir_restorecon
+		[ $? -eq 0 ] && return 0
+	fi
+}
+
 . "$RC_LIBEXECDIR"/sh/functions.sh
 [ -r /etc/rc.conf ] && . /etc/rc.conf
 
@@ -46,29 +102,34 @@
 		fi
 		mkdir /run
 	else
-		eerror "The /run directory does not exist. Unable to continue."
-		return 1
+		#eerror "The /run directory does not exist. Unable to continue."
+		#return 1
+		:
 	fi
 fi
 
-if [ "$sys" = VSERVER ]; then
-	rm -rf /run/*
-elif ! mountinfo -q /run; then
-	ebegin "Mounting /run"
-	rc=0
-	if ! fstabinfo --mount /run; then
-		mount -t tmpfs -o mode=0755,nosuid,nodev tmpfs /run
-		rc=$?
-	fi
-	if [ $rc != 0 ]; then
-		eerror "Unable to mount tmpfs on /run."
-		eerror "Can't continue."
-		exit 1
+if [ -d /run ]; then
+	if [ "$sys" = VSERVER ]; then
+		rm -rf /run/*
+	elif ! mountinfo -q /run; then
+		ebegin "Mounting /run"
+		rc=0
+		if ! fstabinfo --mount /run; then
+			mount -t tmpfs -o mode=0755,nosuid,nodev tmpfs /run
+			rc=$?
+		fi
+		if [ $rc != 0 ]; then
+			eerror "Unable to mount tmpfs on /run."
+			eerror "Can't continue."
+			exit 1
+		fi
 	fi
+	checkpath -d -m 0775 -o root:uucp /run/lock
+else
+	checkpath -d -m 0775 -o root:uucp /var/lock
 fi
 
 checkpath -d $RC_SVCDIR
-checkpath -d -m 0775 -o root:uucp /run/lock
 
 # Try to mount xenfs as early as possible, otherwise rc_sys() will always
 # return RC_SYS_XENU and will think that we are in a domU while it's not.
@@ -80,9 +141,4 @@
 	eend $?
 fi
 
-if [ -e "$RC_LIBEXECDIR"/cache/deptree ]; then
-	cp -p "$RC_LIBEXECDIR"/cache/* "$RC_SVCDIR" 2>/dev/null
-fi
-
-echo sysinit >"$RC_SVCDIR"/softlevel
-exit 0
+. "$RC_LIBEXECDIR"/sh/init-common-post.sh

#!/sbin/openrc-run
# Copyright 1999-2019 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

command="/sbin/dmeventd"
command_args_foreground='-f'
extra_started_commands="reload"
pidfile="/var/run/dmeventd.pid"
# Control idle exit behavior of daemon
export DMEVENTD_IDLE_EXIT_TIMEOUT="${DMEVENTD_IDLE_EXIT_TIMEOUT:=-1}"

depend() {
	# As of .67-r1, we call ALL lvm start/stop scripts with --sysinit, that
	# means dmeventd is NOT notified, as it cannot be safely running
	after lvm device-mapper
}

start() {
	local -i pid
	if [ -e "${pidfile}" ]; then
		pid=$( < "${pidfile}" )
		if kill -0 ${pid} >/dev/null 2>&1; then
			eerror "${svc} already appears to be running as process ${pid}"
			return 1
		else
			ewarn "Detected stale pidfile '${pidfile}' for defunct process ${pid} - removing"
			rm -f "${pidfile}" /var/run/dmeventd-{client,server} >/dev/null 2>&1
		fi
	fi

	ebegin "Starting dmeventd"
	# dmeventd aborts rapidly if left to daemonise into the background,
	# which is the default behaviour. Running it in the foreground but then
	# letting start-stop-daemon background it seems fine, though!
	start-stop-daemon --start --exec "${command}" --background \
		--pidfile "${pidfile}" -- "${command_args_foreground}"
	eend $?
}

stop() {
	ebegin "Stopping dmeventd"
	start-stop-daemon --stop --exec "${command}" --pidfile "${pidfile}"
	eend $?

	if [ -e "${pidfile}" ]; then
		pid=$( < "${pidfile}" )
		if kill -0 ${pid} >/dev/null 2>&1; then
			eerror "${svc} appears to still be running as process ${pid}"
			return 1
		else
			ewarn "Detected stale pidfile '${pidfile}' for defunct process ${pid} - removing"
			rm -f "${pidfile}" /var/run/dmeventd-{client,server} >/dev/null 2>&1
		fi
	fi
}

reload() {
	# TODO: this is not supported under supervisors
	"${command}" -R
}

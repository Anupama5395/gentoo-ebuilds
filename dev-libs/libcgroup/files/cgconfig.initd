#!/sbin/openrc-run
#
# Control Groups Configuration Startup
#
# This script runs the cgconfigparser utility to parse and setup
# the control group filesystem. It uses ${CONFIG_FILE}
# and parses the configuration specified in there.
#
CGCONFIGPARSER="/usr/sbin/cgconfigparser"
CGROUP_FS="cgroup"
CONFIG_FILE="${CONFIG_FILE:-/etc/cgroup/cgconfig.conf}"
MOUNTS_FILE="/proc/self/mounts"
RULES_FILE="/etc/cgroup/cgrules.conf"

# Support multiple mount points
declare -i MAX_INDEX=0
declare -a MOUNT_POINTS MOUNT_OPTIONS

parse_mounts() {
	local device mount_point fs_type options other

	while read device mount_point fs_type options other; do
		if grep -q " ${CGROUP_FS} " <<<" ${fs_type} "; then
			let MAX_INDEX++
			MOUNT_POINTS[${MAX_INDEX}]="${mount_point}"
			MOUNT_OPTIONS[${MAX_INDEX}]="${options}"
		fi
	done < "${MOUNTS_FILE}"

	return 0
}

move_all_to_init_class() {
	local directory
	local -i i

	for i in $( seq 1 ${MAX_INDEX} ); do
		pushd "${MOUNT_POINTS[$i]}" >/dev/null 2>&1 || continue

		if grep -qw "${MOUNT_POINTS[$i]}" "${MOUNTS_FILE}"; then
			for directory in $( find . -depth -type d ); do
				if [ "${directory}" != "." ]; then
					# cat fails with "Argument list too long" error
					sed -nu p < "${directory}"/tasks > tasks
					rmdir "${directory}"
				fi
			done
		else
			ewarn "Resource control filesystem not mounted"
		fi

		popd >/dev/null 2>&1
	done

	return 0
}

umount_fs() {
	local -i i

	for i in $( seq 1 ${MAX_INDEX} ); do
		umount "${MOUNT_POINTS[$i]}" >/dev/null 2>&1 && \
			rmdir "${MOUNT_POINTS[$i]}" >/dev/null 2>&1
	done
}

start_pre() {
	if ! "${CGCONFIGPARSER}" -l "${CONFIG_FILE}" >/dev/null 2>&1; then
		eend 1 "Failed to parse '${CONFIG_FILE}':"
		eerror "$( "${CGCONFIGPARSER}" -l "${CONFIG_FILE}" 2>&1 )"

		return 1
	fi
}

start() {
	local user controller default_cgroup mp
	local -i i j rc=0

	ebegin "Setting up CGroups"

	# Mount filesystem and create cgroups
	parse_mounts

	# Find default cgroup name from rules file
	if [ -f "${RULES_FILE}" ]; then
		read user controller default_cgroup <<<"$( grep -m1 '^\*\s' "${RULES_FILE}" )"
		if [ "${default_cgroup}" = '*' ]; then
			ewarn "'${RULES_FILE}' contains invalid default cgroup '${default_cgroup}'"
			unset default_cgroup
		fi
	fi
	# Use predefined name if none was found
	if [ -z "${default_cgroup}" ]; then
		default_cgroup=sysdefault
	fi

	# Create a default cgroup for tasks to return back to
	for i in $( seq 1 ${MAX_INDEX} ); do
		mp="${MOUNT_POINTS[$i]}"

		[ -n "${mp}" ] || {
			rc=1
			continue
		}

		# Ignore if directory already exists
		mkdir -p "${mp}"/"${default_cgroup}"
		find "${mp}"/ -name tasks | xargs  chmod a+rw
		chmod go-w "${mp}"/tasks

		# Special rule for cpusets
		if grep -qw cpuset <<<"${MOUNT_OPTIONS[$i]}"; then
			cat "${mp}"/cpuset.cpus > "${mp}"/"${default_cgroup}"/cpuset.cpus
			cat "${mp}"/cpuset.mems > "${mp}"/"${default_cgroup}"/cpuset.mems
		fi

		# Classify everything to default cgroup
		for j in $( ps --no-headers -eL o tid ); do
			echo "${j}" > "${mp}"/"${default_cgroup}"/tasks 2>/dev/null
		done
	done

	eend ${rc} "cgroup setup failed"
}

stop() {
	ebegin "Stopping cgconfig service"

	parse_mounts

	move_all_to_init_class

	umount_fs

	eend 0
}

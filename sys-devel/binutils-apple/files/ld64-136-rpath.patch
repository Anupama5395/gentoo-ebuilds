--- ld64-136/src/ld/Options.cpp.dist	2014-12-04 02:44:26.000000000 +0000
+++ ld64-136/src/ld/Options.cpp	2014-12-04 03:02:59.000000000 +0000
@@ -530,7 +530,7 @@ void Options::setArchitecture(cpu_type_t
 				case CPU_TYPE_X86_64:
 					if ( (fMacVersionMin == ld::macVersionUnset) && (fIOSVersionMin == ld::iOSVersionUnset) && (fOutputKind != Options::kObjectFile) ) {
 				#ifdef DEFAULT_MACOSX_MIN_VERSION
-						warning("-macosx_version_min not specified, assuming " DEFAULT_MACOSX_MIN_VERSION);
+						warning("-macosx_version_min not specified, assuming %s", DEFAULT_MACOSX_MIN_VERSION);
 						setMacOSXVersionMin(DEFAULT_MACOSX_MIN_VERSION);
 				#else
 						warning("-macosx_version_min not specified, assuming 10.6");
@@ -546,7 +546,7 @@ void Options::setArchitecture(cpu_type_t
 						warning("-ios_version_min not specified, assuming " DEFAULT_IPHONEOS_MIN_VERSION);
 						setIOSVersionMin(DEFAULT_IPHONEOS_MIN_VERSION);
 				#elif defined(DEFAULT_MACOSX_MIN_VERSION)
-						warning("-macosx_version_min not specified, assuming " DEFAULT_MACOSX_MIN_VERSION);
+						warning("-macosx_version_min not specified, assuming %s", DEFAULT_MACOSX_MIN_VERSION);
 						setMacOSXVersionMin(DEFAULT_MACOSX_MIN_VERSION);
 				#else
 						warning("-macosx_version_min not specified, assuming 10.6");
@@ -1251,9 +1251,18 @@ void Options::setMacOSXVersionMin(const
 	if ( version == NULL )
 		throw "-macosx_version_min argument missing";
 
-	if ( (strncmp(version, "10.", 3) == 0) && isdigit(version[3]) ) {
-		unsigned int minorVersion = version[3] - '0';
-		fMacVersionMin = (ld::MacVersionMin)(0x000A0000 | (minorVersion << 8));
+	if ( strncmp(version, "10.", 3) == 0 ) {
+		if ( ( (strnlen(version, 8) == 4) && isdigit(version[3]) ) || ( (strnlen(version, 8) >= 6) && isdigit(version[3]) && version[4] == '.') ) {
+			unsigned int minorVersion = version[3] - '0';
+			fMacVersionMin = (ld::MacVersionMin)(0x000A0000 | (minorVersion << 8));
+		}
+		else if( ( (strnlen(version, 8) == 5) && isdigit(version[3]) && isdigit(version[4]) ) || ( (strnlen(version, 8) >= 7) && isdigit(version[3]) && isdigit(version[4]) && version[5] == '.' ) ) {
+			unsigned int minorVersion = ((version[3] - '0') * 10) + (version[4] - '0');
+			fMacVersionMin = (ld::MacVersionMin)(0x000A0000 | (minorVersion << 8));
+		}
+		else {
+			warning("unknown option to -macosx_version_min (version '%s', length %d)", version, strlen(version));
+		}
 	}
 	else {
 		warning("unknown option to -macosx_version_min, not 10.x");
@@ -3193,7 +3202,7 @@ void Options::reconfigureDefaults()
 				case CPU_TYPE_X86_64:
 					if ( (fOutputKind != Options::kObjectFile) && (fOutputKind != Options::kPreload) ) {
 			#ifdef DEFAULT_MACOSX_MIN_VERSION
-						warning("-macosx_version_min not specified, assuming " DEFAULT_MACOSX_MIN_VERSION);
+						warning("-macosx_version_min not specified, assuming %s", DEFAULT_MACOSX_MIN_VERSION);
 						setMacOSXVersionMin(DEFAULT_MACOSX_MIN_VERSION);
 			#else
 						warning("-macosx_version_min not specified, assuming 10.6");
@@ -3204,10 +3213,10 @@ void Options::reconfigureDefaults()
 				case CPU_TYPE_ARM:
 					if ( (fOutputKind != Options::kObjectFile) && (fOutputKind != Options::kPreload) ) {
 			#if defined(DEFAULT_IPHONEOS_MIN_VERSION)
-						warning("-ios_version_min not specified, assuming " DEFAULT_IPHONEOS_MIN_VERSION);
+						warning("-ios_version_min not specified, assuming %s", DEFAULT_IPHONEOS_MIN_VERSION);
 						setIOSVersionMin(DEFAULT_IPHONEOS_MIN_VERSION);
 			#elif defined(DEFAULT_MACOSX_MIN_VERSION)
-						warning("-macosx_version_min not specified, assuming " DEFAULT_MACOSX_MIN_VERSION);
+						warning("-macosx_version_min not specified, assuming %s", DEFAULT_MACOSX_MIN_VERSION);
 						setMacOSXVersionMin(DEFAULT_MACOSX_MIN_VERSION);
 			#else
 						warning("-macosx_version_min not specified, assuming 10.6");
@@ -4171,8 +4180,12 @@ void Options::checkIllegalOptionCombinat
 
 	// can't use -rpath unless targeting 10.5 or later
 	if ( fRPaths.size() > 0 ) {
-		if ( !minOS(ld::mac10_5, ld::iOS_2_0) )
-			throw "-rpath can only be used when targeting Mac OS X 10.5 or later";
+		if ( !minOS(ld::mac10_5, ld::iOS_2_0) ) {
+			if ( fMacVersionMin == ld::macVersionUnset ) 
+				throw "-rpath can only be used when targeting Mac OS X 10.5 or later (target version is currently unset)";
+			else
+				throwf("-rpath can only be used when targeting Mac OS X 10.5 or later (currently targeting version '0x%08X')", fMacVersionMin);
+		}
 		switch ( fOutputKind ) {
 			case Options::kDynamicExecutable:
 			case Options::kDynamicLibrary:
